package org.asdc.medhub.Service;import org.asdc.medhub.Repository.BlogsRepository;import org.asdc.medhub.Utility.Model.DatabaseModels.Blogs;import org.asdc.medhub.Utility.Model.DatabaseModels.Doctor;import org.asdc.medhub.Utility.Model.RequestModels.BlogsModel;import org.asdc.medhub.Utility.Model.ResponseModel;import org.asdc.medhub.Utility.Model.ResponseModels.BlogsDetail;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.asdc.medhub.Utility.Model.DatabaseModels.User;import org.mockito.junit.MockitoJUnitRunner;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import java.sql.Timestamp;import java.util.*;import static org.junit.jupiter.api.Assertions.*;import static org.mockito.Mockito.*;@RunWith(MockitoJUnitRunner.class)public class BlogsServiceTest {    @Mock    private BlogsRepository blogsRepository;    @InjectMocks    private BlogsService blogsService;    @Test    public void testGetAllBlogsPosts_NoBlogsFound() {        // Mock authentication context        Authentication authentication = mock(Authentication.class);        SecurityContextHolder.getContext().setAuthentication(authentication);        // Mock user principal        User user = new User();        Doctor doctor = new Doctor();        doctor.setId(1);        user.setDoctor(doctor);        when(authentication.getPrincipal()).thenReturn(user);        // Mock empty list of blogs        when(blogsRepository.findAllByDoctorId(doctor.getId())).thenReturn(Collections.emptyList());        // Execute the service method        ResponseModel<List<BlogsDetail>> response = blogsService.getAllBlogsPostsForDoctors();        // Assertions        assertTrue(response.isSuccess());        assertEquals("All doctor blogs retrieved successfully", response.getMessage());        List<BlogsDetail> blogsDetails = response.getResponseData();        assertNotNull(blogsDetails);        assertTrue(blogsDetails.isEmpty());    }    @Test    public void testGetAllBlogsPosts_OneBlogFound() {        // Mock authentication context        Authentication authentication = mock(Authentication.class);        SecurityContextHolder.getContext().setAuthentication(authentication);        User user = new User();        Doctor doctor = new Doctor();        doctor.setId(1);        user.setDoctor(doctor);        when(authentication.getPrincipal()).thenReturn(user);        // Mock data with one blog        Blogs blog = new Blogs();        blog.setId(1);        blog.setBlogTitle("Blog 1");        blog.setBody("Blog 1 content");        blog.setCreatedAt(Timestamp.valueOf("2022-02-20 10:00:00"));        blog.setDoctor(doctor);        List<Blogs> blogsLists = List.of(blog);        // Mock empty list of blogs        when(blogsRepository.findAllByDoctorId(doctor.getId())).thenReturn(blogsLists);        // Execute the service method        ResponseModel<List<BlogsDetail>> response = blogsService.getAllBlogsPostsForDoctors();        // Assertions        assertTrue(response.isSuccess());        assertEquals("All doctor blogs retrieved successfully", response.getMessage());        List<BlogsDetail> blogsDetails = response.getResponseData();        assertNotNull(blogsDetails);        assertEquals(1, blogsDetails.size());        assertEquals(blog.getId(), blogsDetails.get(0).getId());        assertEquals(blog.getBlogTitle(), blogsDetails.get(0).getTitle());        assertEquals(blog.getBody(), blogsDetails.get(0).getDescription());        assertEquals(blog.getCreatedAt(), blogsDetails.get(0).getCreatedAt());    }    @Test    public void testGetAllBlogsPosts_MultipleBlogsFound() {        // Mock authentication context        Authentication authentication = mock(Authentication.class);        SecurityContextHolder.getContext().setAuthentication(authentication);        // Mock user principal        User user = new User();        Doctor doctor = new Doctor();        doctor.setId(1);        user.setDoctor(doctor);        when(authentication.getPrincipal()).thenReturn(user);        // Mock data        Blogs blog1 = new Blogs();        blog1.setId(1);        blog1.setBlogTitle("Blog 1");        blog1.setBody("Blog 1 content");        blog1.setCreatedAt(Timestamp.valueOf("2022-02-20 10:00:00"));        blog1.setDoctor(doctor);        Blogs blog2 = new Blogs();        blog2.setId(2);        blog2.setBlogTitle("Blog 2");        blog2.setBody("Blog 2 content");        blog2.setCreatedAt(Timestamp.valueOf("2022-02-21 11:00:00"));        blog2.setDoctor(doctor);        List<Blogs> blogsList = Arrays.asList(blog1, blog2);        when(blogsRepository.findAllByDoctorId(doctor.getId())).thenReturn(blogsList);        ResponseModel<List<BlogsDetail>> response = blogsService.getAllBlogsPostsForDoctors();        assertTrue(response.isSuccess());        assertEquals("All doctor blogs retrieved successfully", response.getMessage());        List<BlogsDetail> blogsDetails = response.getResponseData();        assertNotNull(blogsDetails);        assertEquals(2, blogsDetails.size());        assertEquals(blog1.getId(), blogsDetails.get(0).getId());        assertEquals(blog1.getBlogTitle(), blogsDetails.get(0).getTitle());        assertEquals(blog1.getBody(), blogsDetails.get(0).getDescription());        assertEquals(blog1.getCreatedAt(), blogsDetails.get(0).getCreatedAt());        assertEquals(blog2.getId(), blogsDetails.get(1).getId());        assertEquals(blog2.getBlogTitle(), blogsDetails.get(1).getTitle());        assertEquals(blog2.getBody(), blogsDetails.get(1).getDescription());        assertEquals(blog2.getCreatedAt(), blogsDetails.get(1).getCreatedAt());    }    @Test    public void testGetAllBlogsPosts_Exception() {        // Mock authentication context        Authentication authentication = mock(Authentication.class);        SecurityContextHolder.getContext().setAuthentication(authentication);        // Mock user principal        User user = new User();        Doctor doctor = new Doctor();        doctor.setId(1);        user.setDoctor(doctor);        when(authentication.getPrincipal()).thenReturn(user);        // Mock repository behavior to throw an exception        when(blogsRepository.findAllByDoctorId(doctor.getId())).thenThrow(new RuntimeException("Test exception"));        // Perform the service method        ResponseModel<List<BlogsDetail>> response = blogsService.getAllBlogsPostsForDoctors();        // Verify response        assertFalse(response.isSuccess());        assertEquals("An error occurred while fetching doctor blogs: Test exception", response.getMessage());        assertNull(response.getResponseData());    }    @Test    public void testCreateBlogPost_Success() {        // Mock authentication context        Authentication authentication = mock(Authentication.class);        SecurityContextHolder.getContext().setAuthentication(authentication);        // Mock user principal        User user = new User();        Doctor doctor = new Doctor();        doctor.setId(1);        user.setDoctor(doctor);        when(authentication.getPrincipal()).thenReturn(user);        // Mock data        BlogsModel blogsModel = new BlogsModel();        blogsModel.setTitle("New Blog");        blogsModel.setDescription("New Blog Content");        // Mock repository behavior        when(blogsRepository.save(any(Blogs.class))).thenReturn(new Blogs());        // Perform the service method        ResponseModel<String> response = blogsService.createBlogPost(blogsModel);        // Verify response        assertTrue(response.isSuccess());        assertEquals("Blog post created successfully.", response.getMessage());    }    @Test    public void testCreateBlogPost_Exception() {        // Arrange        Authentication authentication = mock(Authentication.class);        SecurityContextHolder.getContext().setAuthentication(authentication);        User user = new User();        Doctor doctor = new Doctor();        doctor.setId(1);        user.setDoctor(doctor);        when(authentication.getPrincipal()).thenReturn(user);        BlogsModel blogsModel = new BlogsModel();        blogsModel.setTitle("New Blog");        blogsModel.setDescription("New Blog Content");        // Mock repository behavior to throw an exception        when(blogsRepository.save(any(Blogs.class))).thenThrow(new RuntimeException("Test exception"));        // Act        ResponseModel<String> response = blogsService.createBlogPost(blogsModel);        // Assert        assertFalse(response.isSuccess());        assertEquals("Failed to create blog post: Test exception", response.getMessage());    }    @Test    public void testGetAllBlogsPostsForPatients_ValidDoctorId() {        //Arrange        int validDoctorId = 1;        List<Blogs> blogsList = new ArrayList<>();        when(blogsRepository.findAllByDoctorId(validDoctorId)).thenReturn(blogsList);        //Act        ResponseModel<List<BlogsDetail>> response = blogsService.getAllBlogsPostsForPatients(validDoctorId);        //Assert        assertEquals(blogsList.size(), response.getResponseData().size());        assertTrue(response.isSuccess());        assertEquals("All doctor blogs retrieved successfully", response.getMessage());    }    @Test    public void testGetAllBlogsPostsForPatients_DoctorIdZero() {        //Arrange        int doctorIdZero = 0;        List<Blogs> blogsList = new ArrayList<>();        when(blogsRepository.getAllByBodyContains("")).thenReturn(blogsList);        //Act        ResponseModel<List<BlogsDetail>> response = blogsService.getAllBlogsPostsForPatients(doctorIdZero);        //Assert        assertEquals(blogsList.size(), response.getResponseData().size());        assertTrue(response.isSuccess());        assertEquals("All doctor blogs retrieved successfully", response.getMessage());    }    @Test    public void testGetAllBlogsPostsForPatients_InValidDoctorId() {        //Arrange        int InvalidDoctorId = 76;        List<Blogs> blogsList = new ArrayList<>();        when(blogsRepository.findAllByDoctorId(InvalidDoctorId)).thenReturn(blogsList);        //Act        ResponseModel<List<BlogsDetail>> response = blogsService.getAllBlogsPostsForPatients(InvalidDoctorId);        //Assert        assertEquals(blogsList.size(), response.getResponseData().size());        assertTrue(response.isSuccess());        assertEquals("All doctor blogs retrieved successfully", response.getMessage());    }    @Test    public void testGetAllBlogsPostsForPatients_ExceptionThrown() {        //Arrange        int validDoctorId = 1;        when(blogsRepository.findAllByDoctorId(validDoctorId)).thenThrow(new RuntimeException("Database error"));        //Act        ResponseModel<List<BlogsDetail>> response = blogsService.getAllBlogsPostsForPatients(validDoctorId);        //Assert        assertNull(response.getResponseData());        assertFalse(response.isSuccess());        assertEquals("An error occurred while fetching doctor blogs: Database error", response.getMessage());    }}