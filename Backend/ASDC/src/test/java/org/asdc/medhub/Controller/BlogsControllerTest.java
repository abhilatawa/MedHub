package org.asdc.medhub.Controller;import org.asdc.medhub.Service.BlogsService;import org.asdc.medhub.Service.Interface.IBlogsService;import org.asdc.medhub.Utility.Model.RequestModels.BlogsModel;import org.asdc.medhub.Utility.Model.ResponseModel;import org.asdc.medhub.Utility.Model.ResponseModels.BlogsDetail;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.junit.runner.RunWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.junit.MockitoJUnitRunner;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import java.util.ArrayList;import java.util.List;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.when;@RunWith(MockitoJUnitRunner.class)class BlogsControllerTest {    @Mock    public IBlogsService blogService;    @InjectMocks    public BlogsController blogsController;    @BeforeEach    public void setUp() {        this.blogService =mock(BlogsService.class);        blogsController = new BlogsController(blogService);    }    @Test    void createBlog_shouldReturnOkResponse() {       //Arrange        BlogsModel blogsModel = new BlogsModel();        blogsModel.setTitle("Test Blog");        blogsModel.setDescription("Test description");        ResponseModel<String> expectedResponse = new ResponseModel<>();        expectedResponse.setSuccess(true);        expectedResponse.setMessage("Blog created successfully");        when(blogService.createBlogPost(blogsModel)).thenReturn(expectedResponse);        //Act        ResponseEntity<ResponseModel<String>> responseEntity = blogsController.createBlog(blogsModel);        //Assert        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());        assertEquals(expectedResponse, responseEntity.getBody());    }    @Test    void getAllBlogsPosts_shouldReturnOkResponse() {        //Arrange        List<BlogsDetail> blogsList = new ArrayList<>();        ResponseModel<List<BlogsDetail>> expectedResponse = new ResponseModel<>();        expectedResponse.setSuccess(true);        expectedResponse.setMessage("All blogs retrieved successfully");        expectedResponse.setResponseData(blogsList);        //Act        when(blogService.getAllBlogsPostsForDoctors()).thenReturn(expectedResponse);        ResponseEntity<ResponseModel<List<BlogsDetail>>> responseEntity = blogsController.getAllBlogsPosts();        //Assert        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());        assertEquals(expectedResponse, responseEntity.getBody());    }    @Test    void getAllBlogsPostForPatients_shouldReturnOkResponsefornoblogs() {        //Arrange        int doctorId = 123; // Example doctor ID        List<BlogsDetail> blogsList = new ArrayList<>();        ResponseModel<List<BlogsDetail>> expectedResponse = new ResponseModel<>();        expectedResponse.setSuccess(true);        expectedResponse.setMessage("All patient blogs retrieved successfully");        expectedResponse.setResponseData(blogsList);        //Act        when(blogService.getAllBlogsPostsForPatients(doctorId)).thenReturn(expectedResponse);        ResponseEntity<ResponseModel<List<BlogsDetail>>> responseEntity =                blogsController.getAllBlogsPostForPatients(doctorId);        //Assert        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());        assertEquals(expectedResponse, responseEntity.getBody());    }    @Test    void getAllBlogsPostForPatients_shouldReturnOkResponseforatleastoneblog() {         //Arrange        int doctorId = 1; // Example doctor ID        List<BlogsDetail> blogsList = new ArrayList<>();        ResponseModel<List<BlogsDetail>> expectedResponse = new ResponseModel<>();        expectedResponse.setSuccess(true);        expectedResponse.setMessage("All patient blogs retrieved successfully");        expectedResponse.setResponseData(blogsList);        //Act        when(blogService.getAllBlogsPostsForPatients(doctorId)).thenReturn(expectedResponse);        ResponseEntity<ResponseModel<List<BlogsDetail>>> responseEntity =                blogsController.getAllBlogsPostForPatients(doctorId);        //Assert        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());        assertEquals(expectedResponse, responseEntity.getBody());    }}