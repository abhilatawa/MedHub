package org.asdc.medhub.Service;import org.asdc.medhub.Repository.BlogsRepository;import org.asdc.medhub.Service.Interface.IBlogsService;import org.asdc.medhub.Utility.Model.DatabaseModels.Blogs;import org.asdc.medhub.Utility.Model.DatabaseModels.Doctor;import org.asdc.medhub.Utility.Model.DatabaseModels.User;import org.asdc.medhub.Utility.Model.RequestModels.BlogsModel;import org.asdc.medhub.Utility.Model.ResponseModel;import org.asdc.medhub.Utility.Model.ResponseModels.BlogsDetail;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Service;import java.sql.Timestamp;import java.time.Instant;import java.util.List;import java.util.stream.Collectors;/** * Service class for handling operations related to blogs. */@Servicepublic class BlogsService implements IBlogsService {    /**     * Blogs Repository instance for database operations     */    private final BlogsRepository blogsRepository;    /**     *     * @param blogsRepository injected repository bean     */    @Autowired    public BlogsService(BlogsRepository blogsRepository) {        this.blogsRepository = blogsRepository;    }    /**     * Retrieves all blog posts.     *     * @return A ResponseModel containing a list of blog posts' details.     */    public ResponseModel<List<BlogsDetail>> getAllBlogsPostsForDoctors() {        ResponseModel<List<BlogsDetail>> response = new ResponseModel<>();        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        User user=(User)authentication.getPrincipal();        try {            List<Blogs> blogs = this.blogsRepository.findAllByDoctorId(user.getDoctor().getId());            List<BlogsDetail> blogsDetails = blogs.stream().map(this::convertBlogToBlogDetail).collect(Collectors.toList());            response.setResponseData(blogsDetails);            response.setMessage("All doctor blogs retrieved successfully");            response.setSuccess(true);        } catch (Exception e) {            response.setMessage("An error occurred while fetching doctor blogs: " + e.getMessage());        }        return response;    }    /**     * Retrieves all blog posts for patients.     *     * @param doctorId The ID of the doctor whose blogs to retrieve.     * @return A ResponseModel containing a list of blog posts' details.     */    public ResponseModel<List<BlogsDetail>> getAllBlogsPostsForPatients(int doctorId) {        ResponseModel<List<BlogsDetail>> response = new ResponseModel<>();        List<Blogs> blogs;        try {            blogs = doctorId != 0 ? this.blogsRepository.findAllByDoctorId(doctorId) : this.blogsRepository.getAllByBodyContains("");            List<BlogsDetail> blogsDetails = blogs.stream().map(this::convertBlogToBlogDetail).collect(Collectors.toList());            response.setResponseData(blogsDetails);            response.setMessage("All doctor blogs retrieved successfully");            response.setSuccess(true);        } catch (Exception e) {            response.setMessage("An error occurred while fetching doctor blogs: " + e.getMessage());        }        return response;    }    /**     * Converts a Blog object to a BlogDetail object.     *     * @param blogs The Blog object to be converted.     * @return A BlogDetail object containing the details of the blog.     */    private BlogsDetail convertBlogToBlogDetail(Blogs blogs) {       BlogsDetail blogsDetail = new BlogsDetail();       blogsDetail.setTitle(blogs.getBlogTitle());        blogsDetail.setDescription(blogs.getBody());        blogsDetail.setCreatedAt(blogs.getCreatedAt());        blogsDetail.setId(blogs.getId());        Doctor doctor = blogs.getDoctor();        if (doctor != null) {            blogsDetail.setDoctorName(doctor.getFirstName() + " " + doctor.getLastName());        }        return blogsDetail;    }    /**     * Creates a new blog post.     *     * @param blogsmodel The details of the blog post to create.     * @return A ResponseModel indicating the success or failure of the operation.     */    public ResponseModel<String> createBlogPost(BlogsModel blogsmodel) {        ResponseModel<String> response = new ResponseModel<String>();        try {            var blog = this.getBlogsfromBlogsModel(blogsmodel);            this.blogsRepository.save(blog);            response.message = "Blog post created successfully.";            response.setSuccess(true);        } catch (Exception e) {            response.message = "Failed to create blog post: " + e.getMessage();        }        return response;    }    /**     * Converts a BlogsModel object to a Blogs object.     *     * @param blogsmodel The BlogsModel object to be converted.     * @return A Blogs object containing the details of the blog post.     */    private Blogs getBlogsfromBlogsModel(BlogsModel blogsmodel) {        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        User user=(User)authentication.getPrincipal();        Blogs blog = new Blogs();        blog.setBlogTitle(blogsmodel.getTitle());        blog.setBody(blogsmodel.getDescription());        blog.setCreatedAt(Timestamp.from(Instant.now()));        blog.setDoctor(user.getDoctor());        return blog;    }}