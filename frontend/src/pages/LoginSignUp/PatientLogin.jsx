import * as React from 'react';import Avatar from '@mui/material/Avatar';import Button from '@mui/material/Button';import CssBaseline from '@mui/material/CssBaseline';import TextField from '@mui/material/TextField';import FormControlLabel from '@mui/material/FormControlLabel';import Checkbox from '@mui/material/Checkbox';import Link from '@mui/material/Link';import Grid from '@mui/material/Grid';import Box from '@mui/material/Box';import LockOutlinedIcon from '@mui/icons-material/LockOutlined';import Typography from '@mui/material/Typography';import Container from '@mui/material/Container';import { createTheme, ThemeProvider } from '@mui/material/styles';import { useState } from "react";import VisibilityIcon from '@mui/icons-material/Visibility';import VisibilityOffIcon from '@mui/icons-material/VisibilityOff';import { IconButton } from "@mui/material";import isEmpty from "validator/es/lib/isEmpty";// Function to validate email formatfunction isValidEmail(email) {    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);}const defaultTheme = createTheme();export default function SignIn() {    // State variables for managing form inputs and errors    const [showPassword, setShowPassword] = useState(false);    const [email, setEmail] = useState('');    const [password, setPassword] = useState('');    const [emailError, setEmailError] = useState(false);    const [passwordError, setPasswordError] = useState(false);    // Function to handle form submission    const handleSubmit = (event) => {        event.preventDefault();        setEmailError(false);        setPasswordError(false);        // Validate email format        if (!isValidEmail(email)) {            setEmailError(true);            // If email is invalid and password is not provided, set password error            if (isValidEmail(email) && !password) {                setPasswordError(true);            } else {                setPasswordError(false);            }            return;        } else if (isEmpty(password)) {            setPasswordError(true);        }        // Validate password format using regex        if (!password || !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/.test(password)) {            setPasswordError(true);            return;        } else {            setPasswordError(false);        }        setEmailError(false);        // Further validation or form submission logic can be added here        const data = new FormData(event.currentTarget);        // Submit data or perform further actions    };    // Function to toggle password visibility    const handleTogglePasswordVisibility = () => {        setShowPassword((prevShowPassword) => !prevShowPassword);    };    return (        <ThemeProvider theme={defaultTheme}>            <Container component="main" maxWidth="xs">                <CssBaseline />                <Box                    sx={{                        marginTop: 8,                        display: 'flex',                        flexDirection: 'column',                        alignItems: 'center',                    }}                >                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>                        <LockOutlinedIcon />                    </Avatar>                    <Typography component="h1" variant="h5">                        Patient Sign in                    </Typography>                    <Box component="form" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>                        {/* Input field for email */}                        <TextField                            margin="normal"                            required                            fullWidth                            id="email"                            label="Email Address"                            name="email"                            autoComplete="email"                            autoFocus                            value={email}                            onChange={(e) => setEmail(e.target.value)}                            error={emailError}                            helperText={emailError ? "Please enter a valid email address" : ""}                        />                        {/* Input field for password */}                        <TextField                            margin="normal"                            required                            fullWidth                            name="password"                            label="Password"                            type={showPassword ? 'text' : 'password'}                            id="password"                            autoComplete="current-password"                            value={password}                            onChange={(e) => setPassword(e.target.value)}                            helperText={passwordError ? "Password is required and must contain one letter, one special character and one digit, and must be be at least 8 characters long." : ""}                            error={passwordError}                            InputProps={{                                endAdornment: (                                    <VisibilityIconButton                                        onClick={handleTogglePasswordVisibility}                                        showPassword={showPassword}                                    />                                )                            }}                        />                        {/* Checkbox for 'Remember me' */}                        <FormControlLabel                            control={<Checkbox value="remember" color="primary" />}                            label="Remember me"                        />                        {/* Sign in button */}                        <Button                            type="submit"                            fullWidth                            variant="contained"                            sx={{ mt: 3, mb: 2 }}                        >                            Sign In                        </Button>                        {/* Links for password recovery and sign up */}                        <Grid container>                            <Grid item xs>                                <Link href="#" variant="body2">                                    Forgot password?                                </Link>                            </Grid>                            <Grid item>                                <Link href="#" variant="body2">                                    {"Don't have an account? Sign Up"}                                </Link>                            </Grid>                        </Grid>                    </Box>                </Box>            </Container>        </ThemeProvider>    );}// Component for toggling password visibilityfunction VisibilityIconButton({ onClick, showPassword }) {    return (        <IconButton            aria-label="toggle password visibility"            onClick={onClick}            edge="end"        >            {showPassword ? <VisibilityIcon /> : <VisibilityOffIcon />}        </IconButton>    );}